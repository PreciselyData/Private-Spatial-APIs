### 
# This Deployment includes a Spatial Manager Service 
###

---
# Product - Spatial Manager Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssm-service
  labels:
    app: ssm-service
spec:
  replicas: {{ .Values.initReplicaCount }}
  selector:
    matchLabels:
      app: ssm-service
  template:
    metadata:
      labels:
        app: ssm-service
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/actuator/prometheus'
        prometheus.io/port: '8080'
        spatial.build: {{ .Values.build | default .Chart.Version | quote }}
    spec:
      containers:
        - name: ssm-service
          image: "{{ .Values.registry.url }}/spatialmanager-service:{{ .Values.registry.tag }}"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: spatial-config
                optional: true
            - secretRef:
                name: spatial-config
                optional: true
          env:
            - name: JAVA_TOOL_OPTIONS
              value: $(jvm.opts.spatialmanager)
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /opt/data
          resources:
            requests:
              cpu: {{ .Values.requestCPU }}
              memory: {{ .Values.requestMemory }}
            limits:
              {{- if .Values.limitCPU }}
              cpu: {{ .Values.limitCPU }}
              {{- end }}
              memory: {{ .Values.limitMemory }}
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 30
          livenessProbe:
            # similar to the startupProbe except the failureThreshold is smaller
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            # similar to the livenessProbe
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: 
                  - sh
                  - -c
                  - "sleep 15"
      imagePullSecrets:
        - name: {{ .Values.registry.secrets }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data-volume-claim
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 60

